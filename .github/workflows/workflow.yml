name: Build Release
on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get version from lib/dev_config.dart
        id: set-version
        run: |
          echo version=$(grep "version:" pubspec.yaml | head -1 | cut -d ':' -f 2 | tr -d ' ' | cut -d '+' -f 1) >> $GITHUB_OUTPUT

#      - name: Extract version from pubspec.yaml
#        id: extract_version
#        run: |
#          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
#          echo "VERSION=$version" >> $GITHUB_ENV

  build-android-apk:
    name: Build Android APK
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate icons and splash screens
        run: |
          dart run flutter_launcher_icons
          dart run flutter_native_splash:create

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ vars.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: Build Android .apk
        run: flutter build apk --release --dart-define=OSM_PROD_CLIENTID='${{ secrets.OSM_PROD_CLIENTID }}' --dart-define=OSM_SANDBOX_CLIENTID='${{ secrets.OSM_SANDBOX_CLIENTID }}'

      - name: Upload .apk artifact
        uses: actions/upload-artifact@v4
        with:
          name: deflock_v${{ needs.get-version.outputs.version }}.apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: 'error'


  build-android-aab:
    name: Build Android AAB
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate icons and splash screens
        run: |
          dart run flutter_launcher_icons
          dart run flutter_native_splash:create

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ vars.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: Build Android appBundle
        run: flutter build appbundle --dart-define=OSM_PROD_CLIENTID='${{ secrets.OSM_PROD_CLIENTID }}' --dart-define=OSM_SANDBOX_CLIENTID='${{ secrets.OSM_SANDBOX_CLIENTID }}'

      - name: Upload .aab artifact
        uses: actions/upload-artifact@v4
        with:
          name: deflock_v${{ needs.get-version.outputs.version }}.aab
          path: build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: 'error'

  build-ios:
    name: Build iOS
    needs: get-version
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Generate icons and splash screens
        run: |
          dart run flutter_launcher_icons
          dart run flutter_native_splash:create

      - name: Set up code signing
        run: |
          # Create temporary keychain
          security create-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate
          echo "${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain

          # Debug: List what certificates we have
          security find-identity -v -p codesigning build.keychain

          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_APPSTORE_PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/${{ vars.IOS_PROVISIONING_PROFILE_UUID }}.mobileprovision

          # Configure Xcode project for manual signing with team ID
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' ios/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ vars.IOS_TEAM_ID }}";/g' ios/Runner.xcodeproj/project.pbxproj
          sed -i '' 's/DEVELOPMENT_TEAM = ;/DEVELOPMENT_TEAM = "${{ vars.IOS_TEAM_ID }}";/g' ios/Runner.xcodeproj/project.pbxproj

          # Create ExportOptions.plist with our values
          cat > ios/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ vars.IOS_TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>me.deflock.deflockapp</key>
                  <string>${{ vars.IOS_PROVISIONING_PROFILE_UUID }}</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
          </dict>
          </plist>
          EOF

      - name: Build iOS .ipa
        run: |
          flutter build ipa --release \
            --dart-define=OSM_PROD_CLIENTID='${{ secrets.OSM_PROD_CLIENTID }}' \
            --dart-define=OSM_SANDBOX_CLIENTID='${{ secrets.OSM_SANDBOX_CLIENTID }}' \
            --export-options-plist=ios/ExportOptions.plist
          cp build/ios/iphoneos/Runner.ipa Runner.ipa
          
      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain build.keychain
          rm -f certificate.p12

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: deflock_v${{ needs.get-version.outputs.version }}.ipa
          path: Runner.ipa
          if-no-files-found: 'error'

  attach-to-release:
    name: Attach Assets to Release
    needs: [get-version, build-android-apk, build-android-aab, build-ios]
    runs-on: ubuntu-latest
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: deflock_v${{ needs.get-version.outputs.version }}.apk

      - name: Download AAB artifact
        uses: actions/download-artifact@v4
        with:
          name: deflock_v${{ needs.get-version.outputs.version }}.aab

      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: deflock_v${{ needs.get-version.outputs.version }}.ipa

      - name: Rename files for release
        run: |
          mv app-release.apk deflock_v${{ needs.get-version.outputs.version }}.apk
          mv app-release.aab deflock_v${{ needs.get-version.outputs.version }}.aab
          mv Runner.ipa deflock_v${{ needs.get-version.outputs.version }}.ipa

      - name: Attach assets to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            deflock_v${{ needs.get-version.outputs.version }}.apk
            deflock_v${{ needs.get-version.outputs.version }}.aab
            deflock_v${{ needs.get-version.outputs.version }}.ipa
